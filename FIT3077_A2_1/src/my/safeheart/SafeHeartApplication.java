/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.safeheart;

import ca.uhn.fhir.context.FhirContext;
import ca.uhn.fhir.model.api.Include;
import ca.uhn.fhir.parser.IParser;
import ca.uhn.fhir.rest.client.IGenericClient;
import ca.uhn.fhir.rest.client.interceptor.LoggingInterceptor;
import ca.uhn.fhir.rest.gclient.ReferenceClientParam;
import ca.uhn.fhir.rest.gclient.TokenClientParam;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.hl7.fhir.dstu3.model.*;
import org.hl7.fhir.dstu3.model.Bundle.BundleEntryComponent;
import javax.swing.*;
import org.json.simple.parser.JSONParser;
import org.json.simple.*;
import org.json.simple.parser.ParseException;


/**
 *
 * @author aaronyiow97
 */
public class SafeHeartApplication extends javax.swing.JFrame {
    
    /**
     * Creates new form test_a2
     */
    public SafeHeartApplication() {
        initComponents();
        
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        patientRecordsComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        pracID = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        goButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Practitioner's ID :");

        jLabel2.setText("Patient's Records :");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        goButton.setText("Go");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pracID)
                    .addComponent(patientRecordsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(goButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(pracID, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchButton)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(patientRecordsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(goButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(226, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Main Tab", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        getAllPatient();
    }//GEN-LAST:event_searchButtonActionPerformed

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        // TODO add your handling code here:
        String patientID = getPatientID();
        System.out.println("Patient ID " + patientID);
        
        createNewTab(patientID);
        
        getPatientInformation(patientID);
        
        
    }//GEN-LAST:event_goButtonActionPerformed
    //6432595799086351324
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SafeHeartApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SafeHeartApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SafeHeartApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SafeHeartApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SafeHeartApplication().setVisible(true);
            }
        });
        
        ctx = FhirContext.forDstu3();
        String serverBaseUrl = "http://hapi-fhir.erc.monash.edu:8080/baseDstu3";
        
        ctx.getRestfulClientFactory().setConnectTimeout(60 * 1000);
        ctx.getRestfulClientFactory().setSocketTimeout(60 * 1000);
        
        newClient = ctx.newRestfulGenericClient(serverBaseUrl);
    }
    
    public void getAllPatient(){ //not needed anymore as we now get all practitioner

        String pracid = pracID.getText();
        Bundle bundle = newClient.search().forResource(Practitioner.class)
            .where(new TokenClientParam("identifier").exactly().code(pracid))
            .returnBundle(Bundle.class)
            .execute();
        
        bundle.getEntry().forEach((entry) -> {
            patientRecordsComboBox.addItem(entry.getResource().getIdElement().getIdPart());
        });
    }
    
    public String getPatientID(){ //not needed anymore as now we will straight get we search for practitioner
        String item = patientRecordsComboBox.getSelectedItem().toString();
        Bundle bundle = newClient.search().forResource(Encounter.class)
            .where(new ReferenceClientParam("practitioner").hasId(item))
            .include(new Include("Encounter:patient"))
            .returnBundle(Bundle.class)
            .execute();
        
        String id = "";
        for (BundleEntryComponent entry : bundle.getEntry()){
            if (entry.getResource().getResourceType().equals(entry.getResource().getResourceType().Patient)){
                id = entry.getResource().getIdElement().getIdPart();
            }
        }
        return id;
    }
    
    public void getObservation(String id){ 
        Bundle bundle = newClient.search().forResource(Observation.class)
            .where(new ReferenceClientParam("patient").hasId(id))
            .where(new TokenClientParam("code").exactly().code("2093-3"))
            .returnBundle(Bundle.class)
            .execute();
        //get patient Identifier from patient/id
        //find the latest observation
        //get cholesterol level
    }
    
    public void createNewTab(String patientID){ //done
        String patientName,pid;
        JPanel jPanel = new JPanel();
        jTabbedPane1.addTab(patientID, jPanel);
        JLabel Name = new JLabel("Patient's Name :");
        JLabel Identifier = new JLabel("Patient's Identifier :");
        JLabel txtName = new JLabel();
        JLabel txtIdentifier = new JLabel();
        
        txtName.setText(patientID);
        txtIdentifier.setText("Hello");
        
        javax.swing.GroupLayout jPanelLayout = new javax.swing.GroupLayout(jPanel);
        jPanel.setLayout(jPanelLayout);
        jPanelLayout.setHorizontalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Name)
                    .addComponent(Identifier))
                .addGap(27, 27, 27)
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtName)
                    .addComponent(txtIdentifier)))
                
        );
        jPanelLayout.setVerticalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Name)
                    .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                
                .addGap(18, 18, 18)
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Identifier)
                    .addComponent(txtIdentifier, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        
    }
    
    public ArrayList<String> getPatientInformation(String id) {
        String familyName,givenName,pid = null;
        ArrayList<String> list1 = new ArrayList<String>();
        Bundle bundle = newClient.search().forResource(Patient.class)
            .where(new TokenClientParam("_id").exactly().code(id))
            .returnBundle(Bundle.class)
            .execute();
       
        
        String encoded = ctx.newJsonParser().setPrettyPrint(true).encodeResourceToString(bundle);
        
        
        System.out.println(encoded);
        
        JSONParser parser = new JSONParser();
        try{
            Object newobj = parser.parse(encoded);
            JSONObject jsonobj = (JSONObject) newobj;

            JSONArray obj_arrayPatientData = (JSONArray) jsonobj.get("entry"); 
            for (Object person : obj_arrayPatientData ) { //Iterate through all Person Array.
                JSONObject ca = (JSONObject) person;
                JSONObject res = (JSONObject) ca.get("resource");
                JSONArray name = (JSONArray) res.get("name");
                for (Object i : name){
                    JSONObject ca1 = (JSONObject) i;
                    JSONArray given = (JSONArray) ca1.get("given");
                    familyName = (String) ca1.get("family");
                    System.out.println(familyName);
                    givenName = (String) given.get(0);
                    System.out.println(givenName);
                    String fullName = familyName + " " + givenName;
                    list1.add(fullName);
                        
                }
                JSONArray identifier = (JSONArray) res.get("identifier");
                for (Object j : identifier){
                    JSONObject ca2 = (JSONObject) j;
                    pid = (String) ca2.get("value");
                    System.out.println(pid);
                    list1.add(pid);
                }
            }
                
        }
        catch(Exception e){
            e.printStackTrace();
        }
        return list1;
        
    }
    
    
    
   
    
    private static FhirContext ctx;
    private static IGenericClient newClient;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton goButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JComboBox<String> patientRecordsComboBox;
    private javax.swing.JTextField pracID;
    private javax.swing.JButton searchButton;
    // End of variables declaration//GEN-END:variables
}
